/**
 * @fileoverview Controlador de autenticaci√≥n y gesti√≥n de usuarios
 * @author Danilo
 * @version 1.0.0
 * @description Maneja registro, login, perfil y logout con JWT + bcrypt
 */

const UsuariosService = require('../services/usuariosService');
const AuthService = require('../services/authService');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
require('dotenv').config();

/**
 * Controlador principal para gesti√≥n de usuarios y autenticaci√≥n
 * Implementa flujo completo: registro ‚Üí login ‚Üí sesi√≥n ‚Üí logout
 * @namespace UsuariosController
 */
const UsuariosController = {
  /**
   * Registrar nuevo usuario en el sistema
   * @async
   * @param {Object} req - Request con email, contrase√±a y nombre
   * @param {Object} res - Response de Express
   * @returns {Promise<void>} Usuario creado (sin contrase√±a) o error
   */
  async crearUsuario(req, res) {
    try {
      const usuario = await UsuariosService.registrarUsuario(req.body);
      
      // Respuesta sin datos sensibles - buena pr√°ctica de seguridad
      res.status(201).json({
        mensaje: 'Usuario registrado exitosamente',
        usuario: {
          id: usuario.id,
          email: usuario.email,
          nombre: usuario.nombre,
          fecha_creacion: usuario.fecha_creacion
        }
      });
    } catch (error) {
      // Manejo espec√≠fico para email duplicado
      if (error.message === 'El correo ya est√° registrado') {
        return res.status(400).json({ 
          error: error.message,
          codigo: 'EMAIL_ALREADY_EXISTS'
        });
      }
      
      // Error gen√©rico para otros casos
      res.status(500).json({ 
        error: 'Error interno del servidor',
        codigo: 'REGISTRATION_SERVER_ERROR'
      });
    }
  },

  /**
   * Autenticar usuario y generar JWT
   * @async
   * @param {Object} req - Request con credenciales (email, contrase√±a)
   * @param {Object} res - Response de Express
   * @returns {Promise<void>} Token JWT + datos usuario o error
   */
  async loginUsuario(req, res) {
    const { email, contrase√±a } = req.body;

    // Validaci√≥n b√°sica de campos obligatorios
    if (!email || !contrase√±a) {
      return res.status(400).json({ 
        error: 'Email y contrase√±a son requeridos',
        codigo: 'MISSING_CREDENTIALS'
      });
    }

    try {
      // B√∫squeda de usuario por email
      const usuario = await UsuariosService.obtenerUsuarioPorEmail(email);

      if (!usuario) {
        return res.status(401).json({ 
          error: 'Usuario no encontrado',
          codigo: 'USER_NOT_FOUND'
        });
      }

      // Verificaci√≥n de contrase√±a hasheada con bcrypt
      const coincide = await bcrypt.compare(contrase√±a, usuario.contrase√±a);
      if (!coincide) {
        return res.status(401).json({ 
          error: 'Contrase√±a incorrecta',
          codigo: 'INVALID_PASSWORD'
        });
      }

      // Generaci√≥n de JWT con payload personalizado
      const token = jwt.sign(
        {
          id: usuario.id,
          email: usuario.email,
          nombre: usuario.nombre
        },
        process.env.JWT_SECRET,
        { expiresIn: '2h' } // Token expira en 2 horas
      );

      res.json({ 
        token,
        usuario: {
          id: usuario.id,
          email: usuario.email,
          nombre: usuario.nombre
        },
        mensaje: 'Login exitoso'
      });
    } catch (error) {
      res.status(500).json({ 
        error: 'Error interno del servidor',
        codigo: 'LOGIN_SERVER_ERROR'
      });
    }
  },

  /**
   * Obtener perfil del usuario autenticado
   * @async
   * @param {Object} req - Request con usuario en req.user (del middleware)
   * @param {Object} res - Response de Express
   * @returns {Promise<void>} Datos del perfil o error
   */
  async obtenerPerfil(req, res) {
    try {
      // req.user viene del middleware de autenticaci√≥n
      const userId = req.user.id;
      const usuario = await UsuariosService.obtenerUsuarioPorId(userId);

      if (!usuario) {
        return res.status(404).json({ 
          error: 'Usuario no encontrado',
          codigo: 'USER_NOT_FOUND'
        });
      }

      // Respuesta sin contrase√±a - seguridad
      res.json({
        id: usuario.id,
        email: usuario.email,
        nombre: usuario.nombre,
        fecha_creacion: usuario.fecha_creacion
      });
    } catch (error) {
      res.status(500).json({ 
        error: 'Error al obtener perfil',
        codigo: 'PROFILE_SERVER_ERROR'
      });
    }
  },

  /**
   * Cerrar sesi√≥n invalidando el token JWT
   * @async
   * @param {Object} req - Request con token y usuario del middleware
   * @param {Object} res - Response de Express
   * @returns {Promise<void>} Confirmaci√≥n de logout o error
   */
  async logout(req, res) {
    try {
      const token = req.token;
      const usuario_id = req.user.id;

      // Validaci√≥n de datos necesarios para logout
      if (!token || !usuario_id) {
        return res.status(400).json({ 
          error: 'Token o usuario no encontrado',
          codigo: 'TOKEN_OR_USER_NOT_FOUND'
        });
      }

      // Logs para debugging - √∫til en desarrollo
      console.log('üîÑ Iniciando proceso de logout...');
      console.log('üë§ Usuario ID:', usuario_id);
      console.log('üé´ Token:', token.substring(0, 10) + '...');

      // Delegaci√≥n al servicio de autenticaci√≥n
      const resultado = await AuthService.logout(token, usuario_id);
      
      console.log('‚úÖ Resultado del logout:', resultado);
      
      // Respuesta con timestamp para auditoria
      res.json({
        ...resultado,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Error en logout controller:', error);
      
      // Manejo granular de errores espec√≠ficos
      if (error.message.includes('Token inv√°lido')) {
        return res.status(400).json({ 
          error: 'Token inv√°lido para logout',
          codigo: 'INVALID_TOKEN_LOGOUT'
        });
      }
      
      if (error.message.includes('no pertenece al usuario')) {
        return res.status(403).json({ 
          error: 'Token no autorizado para este usuario',
          codigo: 'TOKEN_USER_MISMATCH'
        });
      }

      if (error.message.includes('ID de usuario inv√°lido')) {
        return res.status(400).json({ 
          error: 'ID de usuario inv√°lido',
          codigo: 'INVALID_USER_ID'
        });
      }
      
      // Error gen√©rico con detalles para debugging
      res.status(500).json({ 
        error: 'Error interno al cerrar sesi√≥n',
        codigo: 'LOGOUT_SERVER_ERROR',
        detalles: error.message
      });
    }
  }
};

module.exports = UsuariosController;